
const studentList;
const itemsPerPage = 10;
console.log(studentList);
/***
   Create the `showPage` function to hide all of the items in the 
   list except for the ten you want to show.
   Pro Tips: 
     - Keep in mind that with a list of 54 students, the last page 
       will only display four.
     - Remember that the first student has an index of 0.
     - Remember that a function `parameter` goes in the parens when 
       you initially define the function, and it acts as a variable 
       or a placeholder to represent the actual function `argument` 
       that will be passed into the parens later when you call or 
       "invoke" the function 
***/

function showPage(list, page) => {
   const startIndex = (page * itemsPerPage);
   const endIndex = page * itemsPerPage;
   for(let i = 0; i < list.lenth; i += 1;) {
      let li = list[i];
      if (i >= startIndex && <= endIndex) {
         li.style.display = '';
      } else {
            li.style.display = 'none';
      }
}


/*** 
   Create the `appendPageLinks function` to generate, append, and add 
   functionality to the pagination buttons.
***/





// Remember to delete the comments that came with this file, and replace them with your own code comments.



const appendPageLinks = (list) => {
   const numberOfPages = Math.ceil(list.length/studentsPerPage); //calculates # of pages needed and uses Math.Ceil to round up to whole number 
   
   const div = document.createElement('div'); //creates div node
   div.className = 'pagination'; // adds pagination class name to div node
   document.querySelector('.page').appendChild(div); // appends div node to 
   const ul = document.createElement('ul'); //creates ul node
   div.appendChild(ul); //defines ul as a child node of div node
   

   //for loop to add li and a tags with the page number text (aka to manifest series of Pagination Buttons = numberOfPages)
   for (let i = 0; i < numberOfPages; i += 1) {
      const li = document.createElement('li'); //creates li node
      ul.appendChild(li); //defines li as child node of ul node
      const a = document.createElement('a'); //creates a node
      li.appendChild(a); //defines a as child node of li node
      if (i == 0) {
         a.className = "active"; // this class denotes which page of students will be shown.
         showPage(studentList, i +1); // *** any list length or page start if you call the show page function here rather than right after defining the showpage function
      }
      a.href = '#'; //hyperlink to top of the page
      a.textContent = i +1; //defines text content of hyperlink, +1 because i starts at 0
   }
   //event listener to make pagination buttons respond to user click
   let li = ul.firstElementChild;
   let a = document.getElementsByTagName('a');
   ul.addEventListener('click', (event) => {
      for (let i = 0; i < numberOfPages; i += 1) { //loop created to remove active class from all a nodes (should just be first a node per the for loop above)
         let button = a[i]; 
         if (button.className == 'active') { 
            button.classList.remove('active');//removes active class if a button has active class
            console.log(button.className); //to check that active class has been removed from all buttons            
         }
      }

      
      event.target.className = 'active'; //adds active class to the node that was clicked  
      let pageNumber = document.querySelector('.active'); //variable to pass as page number parameter to the showpage function
      console.log(pageNumber.textContent); //to check that textContent is returning as intended (should be numerical string corresponding to the button clicked on)
      console.log(typeof parseInt(pageNumber.textContent)); // uses typeof method to ensure string is being converted to a number using parseItn
      showPage(list, parseInt(pageNumber.textContent));  //converts textContent from string to number and passes number into showPage function               
    });
}
appendPageLinks(studentList);

